name: ci

on:
  push

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        # see package.json
        node: [12]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.4
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn install

      - name: Run linter 👀
        run: yarn lint-all

      # TODO: 実装
      # - name: Run tests 🧪
      #   run: yarn test
  deploy-dev:
    needs: [ci]
    runs-on: ${{ matrix.os }}
    env:
      project-id: usako-4c763

    strategy:
      matrix:
        os: [ubuntu-latest]
        # see package.json
        node: [12]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.4
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn

      - run: yarn install && yarn build-nuxt
        working-directory: ./src

      - run: yarn install
        working-directory: ./functions

      - name: deploy config for dev
        uses: w9jds/firebase-action@master
        with:
          args: functions:config:set `cat .config.dev | tr "\n\r" " "` --project ${{ env.project-id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN_DEV }}

      - name: deploy code to dev
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting,functions --project ${{ env.project-id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN_DEV }}


  deploy-prd:
    if: github.ref == 'refs/heads/master'
    needs: [ci]
    runs-on: ${{ matrix.os }}
    env:
      # TODO: 本番 id 登録
      project-id: usako-4c763

    strategy:
      matrix:
        os: [ubuntu-latest]
        # see package.json
        node: [12]

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.4
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install && yarn build-nuxt
        working-directory: ./src

      - run: yarn install
        working-directory: ./functions

      - name: deploy config for prd
        uses: w9jds/firebase-action@master
        with:
          args: functions:config:set `cat .config.prd | tr "\n\r" " "` --project ${{ env.project-id }}
        env:
          # TODO: 本番 TOKEN 登録
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN_DEV }}

      - name: deploy code to prd
        uses: w9jds/firebase-action@master
        with:
          args: deploy --project ${{ env.project-id }}
        env:
          # TODO: 本番 TOKEN 登録
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN_DEV }}